%% Finite time tracker
% Assuming zero terminal cost

global A B N L C Q R tf Amp w t0

dt = 0.001;

% sT = zeros(4,4);
% fn = @(x)-x*(A + 2*B*inv(R)*N' + B*inv(R)*B'*x + 2*N*inv(R)*B' + A') + 4*N*N' ; % + C'*Q*C ;
% [T,X]=rk4fixed(fn,[tf 0],sT,100)

S = zeros(4,4,tf/dt);
sT = zeros(4,4);
S(:,:,tf/dt) = sT ;

T = t0:dt:tf;

zrdot = Amp*w*cos(w*T);
ref = ones(size)

for t=tf-1:-1:dt
    % Backward Pass
    S(:,:,t)= (-S(:,:,t+1)*(A + 2*B*inv(R)*N' + B*inv(R)*B'*S(:,:,t+1) + 2*N*inv(R)*B' + A') + 4*N*N')*(-dt) + S(:,:,t+1) ;
end

%% V
V = zeros(4,1,tf/dt);
vT = zeros(4,1);
V(:,:,tf/dt) = vT;

ref = zeros(4,1);
% zr_dot = 0;

for t=tf-1:-1:dt
   V(:,:,t) = ((-S(:,:,t+1)*B*inv(R)*B' + 2*N*inv(R)*B' + A')*V(:,:,t+1) - S(:,:,t+1)*L*zr_dot(t))*(-dt) + V(:,:,t+1) + C'*Q*ref;
end

%% X
X = zeros(4,tf/dt);
for t=1:tf/dt
    X(:,t+1) = ((A + 2*B*inv(R)*N' + B*inv(R)*B'*S(:,:,t))*X(:,t) - B*inv(R)*B'*V(:,:,t) + L*zr_dot(t))*dt + X(:,t);
end

%% Ladba
labda = zeros(4,tf/dt);
for t=1:tf/dt
    labda(:,t+1) = labda(:,t) + dt*(S(:,:,t)*X(:,t) - V(:,:,t) + C'*Q*ref(t));
end


%% U
u = zeros(4,tf/dt);
for t=1:tf/dt
    u(:,t+1) = (-inv(R)*(B'*labda(:,t) + 2*N'*X(:,t)))*dt + u(:,t);
end